{"version":3,"sources":["FlashCard.js","FlashCardList.js","App.js","index.js"],"names":["FlashCard","props","flashcard","useState","flip","setFlip","height","setHeight","color","setColor","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","handleClick","event","target","innerText","answer","useEffect","question","options","window","addEventListener","removeEventListener","className","style","boxShadow","ref","map","option","onClick","FlashCardList","flashcards","id","App","setFlashcard","categories","setCategories","categoryEl","amountEl","deCodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","score","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","htmlfor","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.23443df6.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\n\nexport default function FlashCard( { flashcard }, props ) {\n    const [flip, setFlip] = useState(false)\n    const [height, setHeight] = useState('initial')\n    const [color, setColor] = useState('')\n    const frontEl = useRef()\n    const backEl = useRef()\n\n    function setMaxHeight() {\n        const frontHeight = frontEl.current.getBoundingClientRect().height\n        const backHeight = backEl.current.getBoundingClientRect().height\n        setHeight(Math.max(frontHeight, backHeight, 100)) \n    };\n\n    useEffect(() => {\n        setMaxHeight()\n    }, [flashcard.question, flashcard.answer, flashcard.options])\n\n    useEffect(() => {\n        window.addEventListener('resize', setMaxHeight)\n        return () => window.removeEventListener('resize', setMaxHeight)\n    }, [])\n\n    function handleClick(event) {\n        setFlip(!flip)\n        if (event.target.innerText === flashcard.answer){\n            setColor('0 0 5px 2px rgba(1, 152, 117, 0.3)')\n        } else {\n            setColor('0 0 5px 2px rgba(255, 0, 0 , 0.3)')\n        }\n    }\n\n    return (\n        <div className= {`card ${flip ? 'flip' : ''}`} \n             style = {{ height: height, boxShadow: color }}>\n            <div className='front' ref = {frontEl} >\n                {flashcard.question}\n                <div className='options'>\n                    {flashcard.options.map(option => { \n                        return <div className = 'flashcard-option'\n                                key = {option}\n                                onClick ={handleClick}>{option}\n                            </div>})}\n                </div>\n            </div>\n            <div className='back' ref = {backEl}> {flashcard.answer} </div>\n        </div>\n    )\n}\n ","import React from 'react'\nimport FlashCard from './FlashCard'\n\nexport default function FlashCardList( {flashcards }) {\n    return (\n        <div className='card-grid'>\n            {flashcards.map( flashcard => {\n                return <FlashCard flashcard = {flashcard} key = {flashcard.id} />\n                 })}\n        </div>\n    )\n}\n ","import React,  { useState, useEffect, useRef } from 'react'\nimport FlashCardList from './FlashCardList';\nimport FlashCard from './FlashCard'\nimport './app.css'\nimport axios from 'axios'\n\nfunction App() { \n  const [flashcards, setFlashcard] = useState([])\n  const [categories, setCategories] = useState([])\n  const categoryEl = useRef()\n  const amountEl = useRef()\n\n  useEffect(() => {\n    axios.get('https://opentdb.com/api_category.php')\n    .then(res => {\n      setCategories(res.data.trivia_categories)\n    })\n  }, [])\n\n  function deCodeString (str) {\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML = str\n    return textArea.value\n  }\n\n  function handleSubmit(e){\n    e.preventDefault();\n    axios.get('https://opentdb.com/api.php', {\n      params: {\n        amount: amountEl.current.value,\n        category: categoryEl.current.value\n      }\n    })\n    .then(res => {\n      setFlashcard(res.data.results.map((questionItem, index) => {\n        const answer = deCodeString(questionItem.correct_answer)\n        const options = [\n            ...questionItem.incorrect_answers.map(a => deCodeString(a)), \n              answer]\n        return {\n          id: `${index}-${Date.now()}`,\n          question: deCodeString(questionItem.question),\n          answer: answer,\n          options: options.sort(() => Math.random() - .5)\n        }\n      } ))\n    })\n  }\n\n  return (\n    <>\n      <h1> {FlashCard.score} </h1>\n      <form className='header' onSubmit = {handleSubmit}>\n        <div className = 'form-group'>\n          <label htmlFor='category'>Category</label>\n          <select id='category' ref={categoryEl}>\n            {categories.map(category => {\n              return <option value={category.id} key={category.id}>{category.name}</option>\n            })}\n          </select>\n        </div>\n        <div className='form-group'>\n          <label htmlfor = \"amount\">Number of Questions?</label>\n          <input type='number' id='amount' min='1' step = '1' defaultValue='10' ref = {amountEl} />\n        </div>\n        <div className = 'form-group'>\n          <button className = 'button'>Generate</button>\n        </div>\n      </form>\n      <div className=\"container\">\n        <FlashCardList flashcards = {flashcards} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}